package com.sys.exam.service.impl;

import java.util.ArrayList;
import java.util.List;

import com.sys.common.system.CommonUtil;
import com.sys.exam.database.bean.Options;
import com.sys.exam.database.bean.Questions;
import com.sys.exam.database.bean.UserExam;
import com.sys.exam.database.bean.UserQuestion;
import com.sys.exam.database.model.TypeAnswer;
import com.sys.exam.database.model.UqModel;
import com.sys.exam.database.model.UqType;
import com.sys.exam.database.model.UserAnswer;
import com.sys.exam.service.ManagerService;
import com.sys.exam.service.UserQuestionService;
import com.sys.exam.util.Constant;

/**
 * UserQuestion generated by MyEclipse Persistence Tools
 */

public class UserQuestionServiceImpl implements UserQuestionService
{

    private ManagerService managerService;
    
    private ServiceManager serviceManager;

    /**
     * @return Returns the managerService.
     */
    public ManagerService getManagerService()
    {
        return managerService;
    }

    /**
     * @param managerService The managerService to set.
     */
    public void setManagerService(ManagerService managerService)
    {
        this.managerService = managerService;
    }

    @Override
    public List<UqType> findUqTypeList(Long ueId) throws Exception
    {
        String sql = "from UserQuestion uq where uq.userExam.ueId=" + ueId;
        List<UserQuestion> listuqs = managerService.getUserQuestionDao().find(
                sql);
        List<UqType> listUqTypes = new ArrayList<UqType>();

        sql = "from Options order by questions.quesId ,optionOrder";
        List<Options> listOptions = managerService.getOptionsDao().find(sql);

        UqType ut = null;

        for (int i = 1; i <= 3; i++)
        {
            ut = new UqType();
            ut.setType(i);
            List<UqModel> listUqms = new ArrayList<UqModel>();
            UqModel uqm = null;
            for (UserQuestion uq : listuqs)
            {
                Questions que = uq.getQuestions();
                
                if (que.getQuestionType().getQtId() == i)
                {
                    ut.setTypeScore(uq.getUqValue());
                    uqm = new UqModel();
                    uqm.setUq(uq);
                    List<Options> listops = new ArrayList<Options>();
                    for (Options options : listOptions)
                    {
                        if (options.getQuestions().getQuesId() == que
                                .getQuesId())
                        {
                            listops.add(options);
                        }// end if
                    }
                    uqm.setOpList(listops);
                    listUqms.add(uqm);
                }// end if

            }
            ut.setUqModelList(listUqms);
            ut.setUqNum(listUqms.size());
            listUqTypes.add(ut);
        }// end for

        return listUqTypes;
    }

	@Override
	public float addUserAnswer(long ueId,List<TypeAnswer> taList) throws Exception {

	    for (TypeAnswer ta : taList)
        {
            List<UserAnswer>listuas= ta.getUaList();
            for (UserAnswer ua : listuas)
            {
                UserQuestion uq=managerService.getUserQuestionDao().get(ua.getUqId());
                if (ua.getAnList()==null)
                {
                    uq.setUqAnswer(-1);
                }//end if
                else {
                    List<Integer> lista=ua.getAnList();
                    int result=0;
                    for (Integer inta : lista)
                    {
                        if (null!=inta)
                        {
                            result=result+(int)(Math.pow(2.0, Double.valueOf(inta+"")));
                        }//end if
                    }
                    uq.setUqAnswer(result);
                }//end else
                managerService.getUserQuestionDao().save(uq);
            }
            
        }
	    UserExam ueone=managerService.getUserExamDao().get(ueId);
	    serviceManager.getUserExamService().updateSubUserExam(ueone);
	    
	    
		return ueone.getUeGrade();
	}

    /**
     * @return Returns the serviceManager.
     */
    public ServiceManager getServiceManager()
    {
        return serviceManager;
    }

    /**
     * @param serviceManager The serviceManager to set.
     */
    public void setServiceManager(ServiceManager serviceManager)
    {
        this.serviceManager = serviceManager;
    }

}