package com.sys.exam.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.sys.common.logtool.LoggerTool;
import com.sys.common.system.CommonUtil;
import com.sys.exam.database.Pager;
import com.sys.exam.database.bean.Exam;
import com.sys.exam.database.bean.ExamCateRatio;
import com.sys.exam.database.bean.ExamQuesType;
import com.sys.exam.database.bean.Questions;
import com.sys.exam.database.bean.User;
import com.sys.exam.database.bean.UserExam;
import com.sys.exam.database.bean.UserGroupRel;
import com.sys.exam.database.bean.UserQuestion;
import com.sys.exam.database.model.EqtModel;
import com.sys.exam.database.model.QuesType;
import com.sys.exam.database.model.UserExamModel;
import com.sys.exam.database.model.UserScore;
import com.sys.exam.service.ManagerService;
import com.sys.exam.service.UserExamService;
import com.sys.exam.util.Constant;

/**
 * UserExam generated by MyEclipse Persistence Tools
 */

public class UserExamServiceImpl implements UserExamService
{

    private ManagerService managerService;

    /**
     * @return Returns the managerService.
     */
    public ManagerService getManagerService()
    {
        return managerService;
    }

    /**
     * @param managerService The managerService to set.
     */
    public void setManagerService(ManagerService managerService)
    {
        this.managerService = managerService;
    }

    public void updateCheckExamTime()
    {
        List<UserExam> listues = managerService.getUserExamDao().find(
                "from UserExam where ueState=" + Constant.EXAM_STATE_GOING);
        if (null != listues)
        {
            for (int i = 0; i < listues.size(); i++)
            {
                UserExam ue = listues.get(i);
                Date startDate = CommonUtil.getDate(ue.getUeStartTime(),
                        "yyyy/MM/dd HH:mm:ss,SSS");
                Calendar cal = Calendar.getInstance();
                cal.setTime(startDate);
                cal.add(Calendar.MINUTE, ue.getExam().getExamTime());
                Date d = new Date();
                LoggerTool.m_logger.info(d + " : " + cal.getTime());
                LoggerTool.m_logger.info(d.compareTo(cal.getTime()));
                if (d.compareTo(cal.getTime()) > 0)
                {
                    updateSubUserExam(ue);
                }// end if

            }// end for
        }// end if

    }

    public void updateSubUserExam(UserExam ue)
    {
        boolean isJudge = updateGradeJudging(ue);
        if (isJudge)
        {
            ue.setUeEndTime(CommonUtil.getCurrentTime());
            ue.setUeState(Constant.EXAM_STATE_SUB);
            managerService.getUserExamDao().save(ue);
        }// end if
        else
        {
            LoggerTool.m_logger.info("判分失败");
        }// end else

    }

    public boolean updateGradeJudging(UserExam ue)
    {
        boolean ret = false;
        if (null != ue)
        {
            float igrade = 0f;
            String sql = "from UserQuestion uq where uq.userExam.ueId="
                    + ue.getUeId();
            List<UserQuestion> listUqs = managerService.getUserQuestionDao()
                    .find(sql);
            for (UserQuestion uq : listUqs)
            {
                Questions que = uq.getQuestions();
                if (null != que && uq.getUqAnswer() != null
                        && uq.getUqAnswer().intValue() != -1)
                {
                    if (que.getQuesAnswer().intValue() == uq.getUqAnswer()
                            .intValue())
                    {
                        igrade += uq.getUqValue();
                    }// end if
                    else
                    {
                        if (que.getQuestionType().getQtId() == Constant.QUESTION_MULTIPLE)
                        {
                            int yhErrorValue = que.getQuesAnswer().intValue()
                                    ^ uq.getUqAnswer().intValue();
                            int yuNotSel = que.getQuesAnswer().intValue()
                                    & yhErrorValue;
                            if (yhErrorValue == yuNotSel)
                            {
                                LoggerTool.m_logger.info(que.getQuesDes()
                                        + "+1");
                                igrade += 1;
                            }// end if
                        }// end if
                    }// end else

                }// end if
            }// end for

            ue.setUeGrade(igrade);
            managerService.getUserExamDao().save(ue);
            ret = true;
        }// end if

        return ret;
    }

    @Override
    public String addUserExam(Long examId, Long userGroupId) throws Exception
    {
        Exam exam = managerService.getExamDao().get(examId);
        String sql = "from UserGroupRel ugr where ugr.userGroup.ugId="
                + userGroupId;
        List<UserGroupRel> listugrs = managerService.getUserGroupRelDao().find(
                sql);
        List<UserExam> listues = new ArrayList<UserExam>();
        List<UserQuestion> listUqs = new ArrayList<UserQuestion>();
        UserExam uenew = null;
        for (UserGroupRel ugr : listugrs)
        {
            uenew = new UserExam();
            uenew.setExam(exam);
            uenew.setUeGrade(0);
            uenew.setUeState(Constant.EXAM_STATE_NEW);
            uenew.setUser(ugr.getUser());
            listues.add(uenew);
            addQuestionToUserExam(uenew, listUqs, exam);

        }

        managerService.getUserExamDao().saveOrUpdateAll(listues);
        managerService.getUserQuestionDao().saveOrUpdateAll(listUqs);

        return null;
    }

    /**
      * 关于方法的描述：针对指定的用户试卷添加考试的试题
      * @param uenew 用户考试实体
      * @param listuqs 需要加入考试试题的列表
      * @param exam 考试试题
      */
    private void addQuestionToUserExam(UserExam uenew,
            List<UserQuestion> listuqs, Exam exam)
    {
        String sql = "from ExamCateRatio  ecr where ecr.exam.examId="
                + exam.getExamId();
        List<ExamCateRatio> listecrs = managerService.getExamCateRatioDao()
                .find(sql);

        sql = "from ExamQuesType  eqt where eqt.exam.examId="
                + exam.getExamId();
        List<ExamQuesType> listeqts = managerService.getExamQuesTypeDao().find(
                sql);
        for (ExamQuesType eqt : listeqts)
        {
            chouti(eqt, listuqs, listecrs, exam, uenew);
        }

    }

    private void chouti(ExamQuesType eqt, List<UserQuestion> eqTotalList,
            List<ExamCateRatio> qcs, Exam exam, UserExam uenew)
    {
        ExamCateRatio qcm = null;
        int shengtimu = eqt.getEqtNum();
        for (int i = 0; i < qcs.size(); i++)
        {
            qcm = qcs.get(i);
            int total = 0;
            for (int j = i; j < qcs.size(); j++)
            {
                total += qcs.get(j).getEcrRatio();
            }// end for

            int yaoqugeshu = (int) ((qcm.getEcrRatio() / total) * shengtimu);
            int addnum = fenleichouti(yaoqugeshu, qcm, eqTotalList, eqt, exam,
                    uenew);
            shengtimu -= addnum;
        }// end for

    }

    private int fenleichouti(int yaoqugeshu, ExamCateRatio qcm,
            List<UserQuestion> eqTotalList, ExamQuesType qt, Exam exam,
            UserExam uenew)
    {
        int ret = 0;
        StringBuilder hsql = new StringBuilder();
        hsql.append("from Questions que where que.questionType.qtId=");
        hsql.append(qt.getQuestionType().getQtId());
        hsql.append(" and que.questionCategory.qcId=");
        hsql.append(qcm.getQuestionCategory().getQcId());
        hsql.append(" and que.questionBase.qbId=");
        hsql.append(exam.getQuestionBase().getQbId());
        List<Questions> queList = managerService.getQuestionsDao().find(
                hsql.toString());

        if (queList.size() > yaoqugeshu)
        {// 抽取
            int num = queList.size() - 1;
            for (int i = 0; i < yaoqugeshu; i++)
            {
                int rad = (int) (Math.round(Math.random() * num));
                UserQuestion eq = new UserQuestion();
                eq.setUqValue(qt.getEqtValue());
                eq.setQuestions(queList.get(rad));
                eq.setUserExam(uenew);
                eq.setUqSign(0);
                eq.setUqAnswer(-1);
                eqTotalList.add(eq);
                ret++;
                // 去重
                queList.remove(rad);
                num--;
            }
        }
        else
        {
            for (Questions que : queList)
            {
                UserQuestion eq = new UserQuestion();
                eq.setUqValue(qt.getEqtValue());
                eq.setUserExam(uenew);
                eq.setUqSign(0);
                eq.setQuestions(que);
                eqTotalList.add(eq);
                ret++;
            }
        }

        return ret;

    }

    @Override
    public List<UserExamModel> getAvaiExam(User user)
    {
        List<UserExam> listues = null;
        StringBuffer sbsql = new StringBuffer();
        sbsql.append("from UserExam ue where  ue.user.userId=").append(
                user.getUserId());
        listues = managerService.getUserExamDao().find(sbsql.toString());
        List<UserExamModel> ueModelList = new ArrayList<UserExamModel>();
        for (UserExam ue : listues)
        {
            StringBuilder hsql = new StringBuilder();
            hsql.append("from ExamQuesType eqt where eqt.exam.examId=");
            hsql.append(ue.getExam().getExamId());
            List<ExamQuesType> eqtList = managerService.getExamQuesTypeDao()
                    .find(hsql.toString());
            List<EqtModel> eqtMList = new ArrayList<EqtModel>();
            float totalScore = 0f;
            for (ExamQuesType eqt : eqtList)
            {
                totalScore = totalScore + (eqt.getEqtValue() * eqt.getEqtNum());
                EqtModel eqtM = new EqtModel();
                eqtM.setTypeName(eqt.getQuestionType().getQtDes());
                eqtM.setTypeScore(eqt.getEqtValue() * eqt.getEqtNum());
                eqtMList.add(eqtM);
            }
            UserExamModel ueModel = new UserExamModel();
            ueModel.setUe(ue);
            ueModel.setEqtList(eqtMList);
            ueModel.setTotalScore((int) totalScore);
            ueModelList.add(ueModel);
        }

        return ueModelList;
    }

    @Override
    public Pager findUserScoreList(Long examId, Pager pager) throws Exception
    {
        System.out.println(examId);
        Exam exam = managerService.getExamDao().get(examId);
        String sql = "from UserExam ue where ue.exam.examId=" + examId;
        List<UserExam> listUes = managerService.getUserExamDao().find(sql);
        List<UserScore> listuss = new ArrayList<UserScore>();
        UserScore us = null;
        for (UserExam ue : listUes)
        {
            us = new UserScore();
            us.setUeGrade(ue.getUeGrade());
            us.setUeId(ue.getUeId());
            us.setUeState(getUeState(ue.getUeState()));
            us.setUserAccount(ue.getUser().getUserAccount());
            us.setUserName(ue.getUser().getUserName());
            us.setUserRole(ue.getUser().getUserRole());
            listuss.add(us);
        }
        // 分页
        int pageBegin = (pager.getCurrentPage() - 1) * pager.getPageSize();
        int pageEnd = pageBegin + pager.getPageSize();
        int total = listuss.size();
        if (pageEnd > total)
            pageEnd = total;
        Pager p = new Pager(total, pager.getPageSize());
        p.setElements(listuss.subList(pageBegin, pageEnd));

        return p;
    }

    private String getUeState(Integer ueState)
    {
        String ret = "未知";
        switch (ueState)
        {
        case Constant.EXAM_STATE_NEW:
        {
            ret = "新建";
            break;
        }// end case
        case Constant.EXAM_STATE_START:
        {
            ret = "开始";
            break;
        }// end case
        case Constant.EXAM_STATE_GOING:
        {
            ret = "进行中";
            break;
        }// end case
        case Constant.EXAM_STATE_SUB:
        {
            ret = "交卷";
            break;
        }// end case
        case Constant.EXAM_STATE_OVER:
        {
            ret = "完成";
            break;
        }// end case
        default:
            ret = "未知";
            break;
        }// end switch
        return ret;
    }

    @Override
    public UserExam findUeById(Long ueId) throws Exception
    {
        UserExam ue = managerService.getUserExamDao().get(ueId);
        return ue;
    }

    @Override
    public String updateUeGrade(Long ueId, Float ueGrade) throws Exception
    {
        UserExam ue = managerService.getUserExamDao().get(ueId);
        ue.setUeGrade(ueGrade);
        managerService.getUserExamDao().update(ue);
        return null;
    }

    @Override
    public String updateUesState(List<Long> ueIdList, int ueState)
            throws Exception
    {
        String ret = null;
        for (Long long1 : ueIdList)
        {
            UserExam ue = managerService.getUserExamDao().get(long1);
            if (ue.getUeState() < ueState)
            {
                ue.setUeState(ueState);
            }// end if
            else
            {
                ret = "考试完毕的用户不能重新考试";
            }// end else

            managerService.getUserExamDao().update(ue);
        }
        return ret;
    }

    @Override
    public UserExamModel findUeMById(Long ueId, int reStart) throws Exception
    {
        UserExam ue = managerService.getUserExamDao().get(ueId);
        if(null==ue.getUeStartTime()||1==reStart){
        	ue.setUeStartTime(CommonUtil.getCurrentTime());
        	ue.setUeState(Constant.EXAM_STATE_GOING);
            managerService.getUserExamDao().update(ue);
        }
        StringBuilder hsql = new StringBuilder();
        hsql.append("from ExamQuesType eqt where eqt.exam.examId=");
        hsql.append(ue.getExam().getExamId());
        List<ExamQuesType> eqtList = managerService.getExamQuesTypeDao().find(
                hsql.toString());
        List<EqtModel> eqtMList = new ArrayList<EqtModel>();
        float totalScore = 0f;
        for (ExamQuesType eqt : eqtList)
        {
            totalScore = totalScore + (eqt.getEqtValue() * eqt.getEqtNum());
            EqtModel eqtM = new EqtModel();
            eqtM.setTypeName(eqt.getQuestionType().getQtDes());
            eqtM.setTypeScore(eqt.getEqtValue() * eqt.getEqtNum());
            eqtMList.add(eqtM);
        }

        int time = getAvaiTime(ue);

        UserExamModel ueModel = new UserExamModel();
        ueModel.setUe(ue);
        ueModel.setEqtList(eqtMList);
        ueModel.setTotalScore((int) totalScore);
        ueModel.setRemainTime(time);
        return ueModel;
    }

    private int getAvaiTime(UserExam ue)
    {
        int ret = 0;
        Date startDate = CommonUtil.getDate(ue.getUeStartTime(),
                "yyyy/MM/dd HH:mm:ss,SSS");
        Calendar cal = Calendar.getInstance();
        cal.setTime(startDate);
        cal.add(Calendar.MINUTE, ue.getExam().getExamTime());
        Date d = new Date();
        if (d.compareTo(cal.getTime()) > 0)
        {
            ret=0;
        }// end if
        else {
            long rtime=cal.getTimeInMillis()-d.getTime();
            ret=(int)rtime/(1000*60);
            
        }//end else

       
        return ret;
    }
}