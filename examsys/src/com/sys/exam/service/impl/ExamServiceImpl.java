package com.sys.exam.service.impl;

import java.util.ArrayList;
import java.util.List;

import com.sys.common.logtool.LoggerTool;
import com.sys.exam.database.Pager;
import com.sys.exam.database.bean.Exam;
import com.sys.exam.database.bean.ExamQuestion;
import com.sys.exam.database.bean.QuestionCategory;
import com.sys.exam.database.bean.Questions;
import com.sys.exam.database.model.ExamModel;
import com.sys.exam.database.model.QcModel;
import com.sys.exam.database.model.QuesType;
import com.sys.exam.service.ExamService;
import com.sys.exam.service.ManagerService;
import com.sys.exam.util.Constant;
import com.sys.exam.util.DateOperator;

/**
 * Exam generated by MyEclipse Persistence Tools
 */

public class ExamServiceImpl implements ExamService
{
    private ManagerService managerService;

    /**
     * @return Returns the managerService.
     */
    public ManagerService getManagerService()
    {
        return managerService;
    }

    /**
     * @param managerService The managerService to set.
     */
    public void setManagerService(ManagerService managerService)
    {
        this.managerService = managerService;
    }

    @Override
    public Pager findExamList(Pager pager) throws Exception
    {
        StringBuilder hsql = new StringBuilder();
        hsql.append("from Exam exam");
        List<Exam> examList = managerService.getExamDao().find(hsql.toString());
        List<ExamModel> examModelList = new ArrayList<ExamModel>();
        for (Exam exam : examList)
        {
            ExamModel em = new ExamModel();
            em.setExamId(exam.getExamId());
            em.setExamName(exam.getExamName());
            em.setExamTime(exam.getExamTime());
            if (null != exam.getUserExams())
            {
                em.setUserNum(exam.getUserExams().size());
            }
            examModelList.add(em);
        }
        // 分页
        int pageBegin = (pager.getCurrentPage() - 1) * pager.getPageSize();
        int pageEnd = pageBegin + pager.getPageSize();
        int total = examModelList.size();
        if (pageEnd > total)
            pageEnd = total;
        Pager p = new Pager(total, pager.getPageSize());
        p.setElements(examModelList.subList(pageBegin, pageEnd));
        return p;
    }


	@Override
	public String deleteExam(Long examId) throws Exception {
		managerService.getExamDao().deleteByKey(examId);
		return null;
	}
   
    @Override
    public String addExam(String examName, Long qbId, List<QcModel> qcs,
            List<QuesType> typeList) throws Exception
    {
        String ret = null;
        //  判断各种题型数量是否超过题库中数量
        // 创建考试
        Exam exam = new Exam();
        exam.setExamName(examName);
        exam.setExamTime(Constant.EXAM_TIME);
        exam.setExamCreateTime(DateOperator
                .getCurrentTime(Constant.DATE_FORMAT));
        List<ExamQuestion> eqTotalList = new ArrayList<ExamQuestion>();

        // 抽取各种题型的各种分类的题
        for (QuesType qt : typeList)
        {

            chouti(qt, eqTotalList, qcs, qbId, exam);

        }
        // 添加到数据库
        managerService.getExamDao().save(exam);
        managerService.getExamQuestionDao().saveOrUpdateAll(eqTotalList);
        return ret;
    }

    private void chouti(QuesType qt, List<ExamQuestion> eqTotalList,
            List<QcModel> qcs, Long qbId, Exam exam)
    {
        QcModel qcm = null;
        int shengtimu = qt.getNum();
        for (int i = 0; i< qcs.size(); i++)
        {
            qcm = qcs.get(i);
            int total = 0;
            for (int j = i; j < qcs.size(); j++)
            {
                total += qcs.get(j).getQcRatio();
            }// end for

             
            int yaoqugeshu = (int) ((qcm.getQcRatio() / total) * shengtimu);
            int addnum=fenleichouti(yaoqugeshu, qcm, eqTotalList, qbId, qt, exam);
            shengtimu-=addnum;
        }// end for

    }

    private int fenleichouti(int yaoqugeshu, QcModel qcm,
            List<ExamQuestion> eqTotalList, Long qbId, QuesType qt, Exam exam)
    {
        int ret=0;
        StringBuilder hsql = new StringBuilder();
        hsql.append("from Questions que where que.quesType=");
        hsql.append(qt.getType());
        hsql.append(" and que.questionCategory.qcId=");
        hsql.append(qcm.getQcId());
//        hsql.append(" and que.questionBase.qbId=");
//        hsql.append(qbId);
        List<Questions> queList = managerService.getQuestionsDao().find(
                hsql.toString());

        if (queList.size() > yaoqugeshu)
        {// 抽取
            int num = queList.size() - 1;
            for (int i = 0; i < yaoqugeshu; i++)
            {
                int rad = (int) (Math.round(Math.random() * num));
                ExamQuestion eq = new ExamQuestion();
                eq.setEqValue(qt.getScore());
                eq.setQuestions(queList.get(rad));
                eq.setExam(exam);
                eqTotalList.add(eq);
                ret++;
                // 去重
                queList.remove(rad);
                num--;
            }
        }
        else
        {
            for (Questions que : queList)
            {
                ExamQuestion eq = new ExamQuestion();
                eq.setEqValue(qt.getScore());
                eq.setQuestions(que);
                eq.setExam(exam);
                eqTotalList.add(eq);
                ret++;
            }
        }
        
        return ret;

    }

}
